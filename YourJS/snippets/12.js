storeSnippet({"id":12,"name":"setArgs() - Partial Application","description":"","js":"function setArgs(fn, objPreArgs) {\r\n  var n, arrPreArgIsSet = [];\r\n  for (var k in objPreArgs) {\r\n    n = parseInt(k, 10);\r\n    if (n >= 0 && has(objPreArgs, n)) {\r\n      arrPreArgIsSet[n] = true;\r\n    }\r\n  }\r\n  var lOuter = arrPreArgIsSet.length;\r\n\r\n  return function() {\r\n    var arrArgs = [], arrPostArgs = slice(arguments), lInner = arrPostArgs.length;\r\n    for (var iOuter = 0, iInner = 0; iOuter < lOuter; iOuter++) {\r\n      arrArgs[iOuter] = arrPreArgIsSet[iOuter] ? objPreArgs[iOuter] : arrPostArgs[iInner++];\r\n    }\r\n    return fn.apply(this, arrArgs.concat(arrPostArgs.slice(iInner)));\r\n  };\r\n}","post":"Gives us the ability to set specific arguments in a function.  Unlike `YourJS.partial()`, this function allows us to specify the exact argument indices we want to predefine.  For example, if we wanted to create a function which gets the `name` property of any object we could combine this with `YourJS.get()`:\r\n```javascript\r\nvar getName = YourJS.setArgs(YourJS.get, {1: 'name'});\r\n\r\nvar me = { name: 'Chris West' };\r\nvar you = { name: 'John Smith' };\r\nvar nobody = {};\r\n\r\nconsole.log(getName(me, '[NOBODY]'));  \/\/ Chris West\r\nconsole.log(getName(you, '[NOBODY]'));  \/\/ John Smith\r\nconsole.log(getName(nobody, '[NOBODY]'));  \/\/ [NOBODY]\r\n```\r\n\r\n<h2><code style=\"font-size: 1em;\">setArgs(fn, objPreArgs)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 0 30px;\">\r\n    <h2>Parameters<\/h2>\r\n    <ol>\r\n        <li>\r\n            <b><code>fn<\/code> {Function}:<\/b><br \/>\r\n            Function that will be called with the modified arguments.\r\n        <\/li>\r\n        <li>\r\n            <b><code>objPreArgs<\/code> {Array|Object}:<\/b><br \/>\r\n            Array or object whose values will be sent as arguments to <code>fn<\/code> at the specified indices.\r\n        <\/li>\r\n    <\/ol>\r\n    \r\n    <h2>Returns<\/h2>\r\n    <div>Returns a function which will call <code>fn<\/code> with the predefined arguments at their specified indices.  Any arguments passed to this function will be used to fill in the arguments that were not predefined.<\/div>\r\n<\/div>","required_ids":{},"tags":[],"variables":["setArgs"]});